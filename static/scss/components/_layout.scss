$max-width:        1920px;      // set page max-width
$column-width:     3.125%;      // 5.982    // set column width
$gutter-width:     1.0416667%;      // set gutter width
$maximum-columns:  24;          // set max number of columns

@mixin clearfix {
    zoom: 1;

    &:before, &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}

@mixin border-box {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

@function newgutter($columns, $container-columns: $maximum-columns) {
    $width: $columns * $column-width;
    $container-width: $container-columns * $column-width;
    @return percentage($width / $container-width / 2);
}

@function columns($columns, $container-columns: $maximum-columns) {
    $width: $columns * $column-width;
    $container-width: $container-columns * $column-width;
    @return percentage($width / $container-width);
}

@function calcPercentage($a) {
    @return percentage($a);
}

@mixin row {
    width: 100%; // make sure to fill its container
    margin: 0 auto;
    @include clearfix; // clear our floats
}

@function offset-columns($columns) {
    $padding:
    $columns * $column-width + $columns * $gutter-width;
    @return $padding;
}

@mixin offset($columns, $from-direction: left) {
    @if $from-direction == left {
        float: left;
        padding-left: offset-columns($columns);
    }
    @if $from-direction == right {
        float: right;
        padding-right: offset-columns($columns);
    }
}

@mixin last {
    margin-right: 0;
    float: right;
}

/*****************************************************/
/*CONTAINERS*/
/*****************************************************/
.container {
    width: columns(24);
    @include border-box;
    @extend %clearfix;
}

.row { @include row(); }

/*OFFSETS*/
/*COLUMNS*/

$i: 1;
@while $i < ($maximum-columns + 1) {
    .col-#{$i} {
        width: columns($i);
        //        padding-right: newgutter(1);
        float: left;
    }
    .offset-l-#{$i} {
        margin-left: columns($i);
    }
    .offset-r-#{$i} {
        margin-right: columns($i);
    }
    $i: $i + 1;
}

section {
    @extend %clearfix;
}

@function nbrCol($nbrCol) {
    @if($nbrCol%2 == 0) {
        $nbrCol: $nbrCol + 1;
    }
    @return $nbrCol;
}

/*PADDING CLASSES*/
.p-l {
    padding-left: newgutter(1);
}
.p-r {
    padding-right: newgutter(1);
}

/*FIXED CONTAINER*/

$i: 1;
$j: 1;

$containers: 8, 10, 12, 24;

@each $current-container in $containers {
    $i: index($containers, $current-container);

    .container-#{$current-container} {
        max-width: 100%;
        width: $max-width / $maximum-columns * $current-container;
        margin: 0 auto;
        @extend %clearfix;

        @for $k from $j through $current-container {

            > .col-#{$k} {
                width: calcPercentage($k / $current-container);
            }

            > .o-l-#{$k} {
                margin-left: calcPercentage($k / $current-container);
            }

            > .o-r-#{$k} {
                margin-right: calcPercentage($k / $current-container);
            }
        }

        @media all and (max-width: $max-width / $maximum-columns * $current-container) {
            padding: 0 calcPercentage(1 / $current-container);
        }
    }
}

/*NESTED COLUMNS*/
$i: 1;
$j: 1;

@while $i < ($maximum-columns + 1) {
    .col-#{$i} {

        @for $k from $j through $i {

            > .col-#{$k} {
                width: calcPercentage($k / $i);
            }

            > .o-l-#{$k} {
                margin-left: calcPercentage($k / $i);
            }

            > .o-r-#{$k} {
                margin-right: calcPercentage($k / $i);
            }

            /*padding 1/2 col1*/
            @if $k < 2 {

                > .p-l {
                    padding-left: calcPercentage(($k / $i) / 2);
                }
                > .p-r {
                    padding-right: calcPercentage(($k / $i) / 2);
                }
            }
        }
    }
    $i: $i + 1;
}

.col-12 {
    padding-left: newgutter(0);
    padding-right: newgutter(0);
}

/*NO PADDING CLASSES*/
.np-l {
    padding-left: 0;
}

.np-r {
    padding-right: 0;
}

/* ----------------------
	Gridblock
----------------------- */

$gridblocks: one two three four five six seven eight nine ten;
$base: 100;

.gridblock {
    width: 100%;
    @extend %clearfix;

    > * {
        float: left;
        @include border-box();
    }

    @each $current-gridblock in $gridblocks {
        $i: index($gridblocks, $current-gridblock);

        &.#{$current-gridblock} > * {
            width: calcPercentage($base/$i/100);
        }
    }
}


/* ----------------------
	Itemblock
----------------------- */

$itemblocks: one two three four five six seven eight nine ten;
$marginNbr: 1; /* % */

@mixin i-block($class, $current-itemblock, $margin, $n) {

    @if ($n) {
        .itemblock-#{$class} {
            width: 100%;

            > * {
                float: left;
                @include border-box();
                content:"#{$current-itemblock}";
            }

            $i: index($itemblocks, $current-itemblock);
            $oi: $i;
            $i: $i - $n;

            &.#{$current-itemblock} > * {
                position: relative;
                width: percentage((1 / $i) * (100 - (($i - 1)  * $margin)) / 100);
                margin-right: percentage($margin / 100);

                &:nth-child(#{$oi}n) {
                    margin-right: percentage($margin / 100);
                }

                &:nth-child(#{$i}n) {
                    margin-right: 0;
                }

                &:last-child {
                    margin-right: 0;
                }
            }
        }
    } @else {
        .itemblock-#{$class} {
            width: 100%;

            > * {
                float: left;
                @include border-box();
                content:"#{$current-itemblock}";
            }

            $i: index($itemblocks, $current-itemblock);

            &.#{$current-itemblock} > * {
                position: relative;
                width: percentage((1 / $i) * (100 - (($i - 1)  * $margin)) / 100);
                margin-right: percentage($margin / 100);

                &:nth-child(#{$i}n) {
                    margin-right: 0;
                }

                &:last-child {
                    margin-right: 0;
                }
            }
        }
    }

}

/* ----------------------
	Ratio
----------------------- */
.ratio {
    position: relative;
    @include ratio(100%);
    width: 100%;
}
